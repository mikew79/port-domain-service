// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/port.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortsDomainClient is the client API for PortsDomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsDomainClient interface {
	// Get One Port
	GetPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Port, error)
	// Create a Port in the Data source
	CreatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Update the details of an existing Port
	UpdatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete a port from the data source
	DeletePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Return a stream of Ports from the data source
	ListPorts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (PortsDomain_ListPortsClient, error)
	// Create or update ports from a stream provided by the client
	CreateUpdatePorts(ctx context.Context, opts ...grpc.CallOption) (PortsDomain_CreateUpdatePortsClient, error)
}

type portsDomainClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsDomainClient(cc grpc.ClientConnInterface) PortsDomainClient {
	return &portsDomainClient{cc}
}

func (c *portsDomainClient) GetPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/proto.PortsDomain/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsDomainClient) CreatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.PortsDomain/CreatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsDomainClient) UpdatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.PortsDomain/UpdatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsDomainClient) DeletePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.PortsDomain/DeletePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsDomainClient) ListPorts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (PortsDomain_ListPortsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortsDomain_ServiceDesc.Streams[0], "/proto.PortsDomain/ListPorts", opts...)
	if err != nil {
		return nil, err
	}
	x := &portsDomainListPortsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortsDomain_ListPortsClient interface {
	Recv() (*Port, error)
	grpc.ClientStream
}

type portsDomainListPortsClient struct {
	grpc.ClientStream
}

func (x *portsDomainListPortsClient) Recv() (*Port, error) {
	m := new(Port)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portsDomainClient) CreateUpdatePorts(ctx context.Context, opts ...grpc.CallOption) (PortsDomain_CreateUpdatePortsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortsDomain_ServiceDesc.Streams[1], "/proto.PortsDomain/CreateUpdatePorts", opts...)
	if err != nil {
		return nil, err
	}
	x := &portsDomainCreateUpdatePortsClient{stream}
	return x, nil
}

type PortsDomain_CreateUpdatePortsClient interface {
	Send(*Port) error
	CloseAndRecv() (*UpdateResponse, error)
	grpc.ClientStream
}

type portsDomainCreateUpdatePortsClient struct {
	grpc.ClientStream
}

func (x *portsDomainCreateUpdatePortsClient) Send(m *Port) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portsDomainCreateUpdatePortsClient) CloseAndRecv() (*UpdateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortsDomainServer is the server API for PortsDomain service.
// All implementations must embed UnimplementedPortsDomainServer
// for forward compatibility
type PortsDomainServer interface {
	// Get One Port
	GetPort(context.Context, *Port) (*Port, error)
	// Create a Port in the Data source
	CreatePort(context.Context, *Port) (*UpdateResponse, error)
	// Update the details of an existing Port
	UpdatePort(context.Context, *Port) (*UpdateResponse, error)
	// Delete a port from the data source
	DeletePort(context.Context, *Port) (*UpdateResponse, error)
	// Return a stream of Ports from the data source
	ListPorts(*ListRequest, PortsDomain_ListPortsServer) error
	// Create or update ports from a stream provided by the client
	CreateUpdatePorts(PortsDomain_CreateUpdatePortsServer) error
	mustEmbedUnimplementedPortsDomainServer()
}

// UnimplementedPortsDomainServer must be embedded to have forward compatible implementations.
type UnimplementedPortsDomainServer struct {
}

func (UnimplementedPortsDomainServer) GetPort(context.Context, *Port) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedPortsDomainServer) CreatePort(context.Context, *Port) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedPortsDomainServer) UpdatePort(context.Context, *Port) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedPortsDomainServer) DeletePort(context.Context, *Port) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (UnimplementedPortsDomainServer) ListPorts(*ListRequest, PortsDomain_ListPortsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPorts not implemented")
}
func (UnimplementedPortsDomainServer) CreateUpdatePorts(PortsDomain_CreateUpdatePortsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUpdatePorts not implemented")
}
func (UnimplementedPortsDomainServer) mustEmbedUnimplementedPortsDomainServer() {}

// UnsafePortsDomainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsDomainServer will
// result in compilation errors.
type UnsafePortsDomainServer interface {
	mustEmbedUnimplementedPortsDomainServer()
}

func RegisterPortsDomainServer(s grpc.ServiceRegistrar, srv PortsDomainServer) {
	s.RegisterService(&PortsDomain_ServiceDesc, srv)
}

func _PortsDomain_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsDomainServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortsDomain/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsDomainServer).GetPort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsDomain_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsDomainServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortsDomain/CreatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsDomainServer).CreatePort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsDomain_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsDomainServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortsDomain/UpdatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsDomainServer).UpdatePort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsDomain_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsDomainServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PortsDomain/DeletePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsDomainServer).DeletePort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsDomain_ListPorts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortsDomainServer).ListPorts(m, &portsDomainListPortsServer{stream})
}

type PortsDomain_ListPortsServer interface {
	Send(*Port) error
	grpc.ServerStream
}

type portsDomainListPortsServer struct {
	grpc.ServerStream
}

func (x *portsDomainListPortsServer) Send(m *Port) error {
	return x.ServerStream.SendMsg(m)
}

func _PortsDomain_CreateUpdatePorts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortsDomainServer).CreateUpdatePorts(&portsDomainCreateUpdatePortsServer{stream})
}

type PortsDomain_CreateUpdatePortsServer interface {
	SendAndClose(*UpdateResponse) error
	Recv() (*Port, error)
	grpc.ServerStream
}

type portsDomainCreateUpdatePortsServer struct {
	grpc.ServerStream
}

func (x *portsDomainCreateUpdatePortsServer) SendAndClose(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portsDomainCreateUpdatePortsServer) Recv() (*Port, error) {
	m := new(Port)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortsDomain_ServiceDesc is the grpc.ServiceDesc for PortsDomain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortsDomain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PortsDomain",
	HandlerType: (*PortsDomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPort",
			Handler:    _PortsDomain_GetPort_Handler,
		},
		{
			MethodName: "CreatePort",
			Handler:    _PortsDomain_CreatePort_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _PortsDomain_UpdatePort_Handler,
		},
		{
			MethodName: "DeletePort",
			Handler:    _PortsDomain_DeletePort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPorts",
			Handler:       _PortsDomain_ListPorts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateUpdatePorts",
			Handler:       _PortsDomain_CreateUpdatePorts_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/port.proto",
}
